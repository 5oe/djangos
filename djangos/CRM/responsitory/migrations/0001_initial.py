# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-08-22 09:10
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnswerInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(verbose_name='回答时间')),
                ('up_count', models.PositiveIntegerField(default=0, verbose_name='点赞数')),
                ('down_count', models.PositiveIntegerField(default=0, verbose_name='踩数')),
            ],
            options={
                'verbose_name_plural': '回答表',
                'db_table': 'AnswerInfo',
            },
        ),
        migrations.CreateModel(
            name='ClsInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=40, null=True, verbose_name='班级名')),
                ('semester', models.SmallIntegerField(verbose_name='学期')),
                ('start_date', models.DateField(verbose_name='开班日期')),
                ('graduate_date', models.DateField(verbose_name='毕业日期')),
                ('type', models.SmallIntegerField(choices=[(0, '脱产'), (1, '周末'), (2, '网络班')], verbose_name='班级类型')),
            ],
            options={
                'verbose_name_plural': '班级表',
                'db_table': 'ClsInfo',
            },
        ),
        migrations.CreateModel(
            name='CourseInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20, verbose_name='课程名')),
                ('price', models.PositiveIntegerField(verbose_name='价格')),
                ('outline', models.TextField(verbose_name='课程大纲')),
                ('cyc', models.PositiveIntegerField(verbose_name='课程周期(月)')),
            ],
            options={
                'verbose_name_plural': '课程表',
                'db_table': 'CourseInfo',
            },
        ),
        migrations.CreateModel(
            name='CustomerFollowUpInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='跟踪内容')),
                ('status', models.SmallIntegerField(choices=[(0, '近期无报名计划'), (1, '一个月内报名'), (2, '2周内要报名'), (3, '已报名')], verbose_name='状态')),
                ('date', models.DateField(auto_now_add=True, verbose_name='日期')),
            ],
            options={
                'verbose_name_plural': '客户跟踪表',
                'db_table': 'CustomerFollowUpInfo',
            },
        ),
        migrations.CreateModel(
            name='CustomerInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='匿名用户', max_length=20)),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='发掘时间')),
                ('source', models.PositiveIntegerField(choices=[(0, 'qq群'), (1, '51CTO'), (2, '百度推广'), (3, '知乎'), (4, '转介绍'), (5, '其他论坛')], verbose_name='来源')),
                ('contact', models.PositiveIntegerField(choices=[(0, 'qq'), (1, '微信'), (2, '电话联系')], verbose_name='联系方式')),
                ('status', models.PositiveIntegerField(choices=[(0, '未报名'), (1, '已报名'), (2, '已退学')], verbose_name='状态')),
                ('consult_content', models.TextField(verbose_name='咨询内容')),
                ('consult_courses', models.ManyToManyField(to='responsitory.CourseInfo', verbose_name='咨询课程')),
            ],
            options={
                'verbose_name_plural': '客户表',
                'db_table': 'CustomerInfo',
            },
        ),
        migrations.CreateModel(
            name='LectureInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='本节主题')),
                ('content', models.TextField(verbose_name='本节主要内容')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='上课时间')),
                ('homework', models.TextField(blank=True, null=True, verbose_name='作业需求')),
                ('cls', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.ClsInfo', verbose_name='所属课堂')),
            ],
            options={
                'verbose_name_plural': '课堂记录表',
                'db_table': 'LectureInfo',
            },
        ),
        migrations.CreateModel(
            name='MenuInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='菜单名')),
                ('url_type', models.SmallIntegerField(choices=[(0, '固定url'), (1, '动态url')], verbose_name='URL类型')),
                ('url_name', models.CharField(max_length=128, verbose_name='URL后缀')),
            ],
            options={
                'verbose_name_plural': '菜单表',
                'db_table': 'MenuInfo',
            },
        ),
        migrations.CreateModel(
            name='QuestionInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='标题')),
                ('detail', models.TextField(verbose_name='问题详述')),
            ],
            options={
                'verbose_name_plural': '提交问题表',
                'db_table': 'QuestionInfo',
            },
        ),
        migrations.CreateModel(
            name='RoleInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20, unique=True, verbose_name='角色名')),
                ('menu', models.ManyToManyField(blank=True, null=True, to='responsitory.MenuInfo', verbose_name='菜单')),
            ],
            options={
                'db_table': 'RoleInfo',
            },
        ),
        migrations.CreateModel(
            name='SchoolInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='学校名')),
                ('address', models.CharField(max_length=128, verbose_name='学校地址')),
            ],
            options={
                'verbose_name_plural': '校区表',
                'db_table': 'SchoolInfo',
            },
        ),
        migrations.CreateModel(
            name='ScoreInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.PositiveIntegerField(choices=[(100, 'A+'), (95, 'A'), (90, 'A-'), (85, 'B+'), (80, 'B'), (75, 'B-'), (70, 'C+'), (65, 'C'), (60, 'C-'), (0, '不及格')], default=0, verbose_name='成绩')),
                ('student_status', models.SmallIntegerField(choices=[(0, '缺勤'), (1, '迟到'), (2, '早退'), (3, '出勤')], verbose_name='出勤状态')),
                ('note', models.TextField(blank=True, null=True, verbose_name='成绩备注')),
                ('date', models.DateField(auto_now_add=True, verbose_name='提交日期')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.LectureInfo', verbose_name='所属课堂')),
            ],
            options={
                'verbose_name_plural': '成绩表',
                'db_table': 'ScoreInfo',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, null=True, upload_to='head', verbose_name='头像')),
                ('identity_id', models.CharField(max_length=18, unique=True, verbose_name='身份证号码')),
                ('role', models.ManyToManyField(to='responsitory.RoleInfo', verbose_name='角色')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户名')),
            ],
            options={
                'verbose_name_plural': '用户表',
                'db_table': 'UserInfo',
            },
        ),
        migrations.AddField(
            model_name='scoreinfo',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.UserInfo', verbose_name='学员'),
        ),
        migrations.AddField(
            model_name='questioninfo',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.UserInfo', verbose_name='提问学生'),
        ),
        migrations.AddField(
            model_name='lectureinfo',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.UserInfo', verbose_name='上课老师'),
        ),
        migrations.AddField(
            model_name='customerinfo',
            name='consultant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.UserInfo', verbose_name='课程顾问'),
        ),
        migrations.AddField(
            model_name='customerinfo',
            name='introduce_customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='responsitory.CustomerInfo', verbose_name='转介绍学员'),
        ),
        migrations.AddField(
            model_name='customerfollowupinfo',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.CustomerInfo', verbose_name='客户'),
        ),
        migrations.AddField(
            model_name='customerfollowupinfo',
            name='handler',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.UserInfo', verbose_name='跟进入'),
        ),
        migrations.AddField(
            model_name='clsinfo',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.CourseInfo', verbose_name='所学课程'),
        ),
        migrations.AddField(
            model_name='clsinfo',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.SchoolInfo', verbose_name='所属校区'),
        ),
        migrations.AddField(
            model_name='clsinfo',
            name='teachers',
            field=models.ManyToManyField(to='responsitory.UserInfo', verbose_name='教师'),
        ),
        migrations.AddField(
            model_name='answerinfo',
            name='handler',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.UserInfo', verbose_name='回答者'),
        ),
        migrations.AddField(
            model_name='answerinfo',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='responsitory.QuestionInfo', verbose_name='问题'),
        ),
        migrations.AlterUniqueTogether(
            name='clsinfo',
            unique_together=set([('school', 'type', 'course', 'semester')]),
        ),
    ]
